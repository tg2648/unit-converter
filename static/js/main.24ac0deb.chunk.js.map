{"version":3,"sources":["data.tsx","components/Footer.tsx","components/Home.tsx","components/Input.tsx","components/InputGroup.tsx","components/InputGroupContainer.tsx","components/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["DATA","FaRuler","FaWeightHanging","FaMugHot","Footer","className","href","rel","target","Home","map","categoryData","index","to","categoryId","Button","variant","size","categoryIcon","categoryName","Input","props","FormControl","id","inputMode","value","onChange","handleChange","autoComplete","onClick","handleCopy","getConversionFactor","unitId","units","unitData","find","element","conversionFactor","InputGroup","initialValues","data","forEach","unit","numValue","undefined","displayValue","useState","values","setValues","htmlFor","unitName","e","changedUnitId","newValues","currentNumValue","Number","replaceAll","currentDisplayValue","toLocaleString","length","commonValue","calc","valueStr","parseFloat","toFixed","toString","navigator","clipboard","writeText","then","console","log","showToast","error","handleCopyButtonClick","InputGroupContainer","toastVisible","setToastVisible","exact","style","position","bottom","left","transform","Toast","animation","show","onClose","autohide","delay","Body","App","Container","basename","process","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.24ac0deb.chunk.js","sourcesContent":["/**\n * Unit definitions.\n * Search for icons here: https://react-icons.github.io/react-icons/search\n */\n\nimport { IconType } from 'react-icons';\nimport { FaMugHot, FaRuler, FaWeightHanging } from 'react-icons/fa';\n\nexport type Unit = {\n  unitId: string,\n  unitName: string,\n  conversionFactor: number,\n}\n\nexport type Category = {\n  categoryId: string,\n  categoryName: string,\n  categoryIcon: IconType,\n  units: Unit[]\n}\n\nexport const DATA: Category[] = [\n  {\n    'categoryId': 'length',\n    'categoryName': 'Length',\n    'categoryIcon': FaRuler,\n    'units': [\n      {\n        'unitId': 'kilometers',\n        'unitName': 'Kilometers',\n        'conversionFactor': 0.001\n      },\n      {\n        'unitId': 'meters',\n        'unitName': 'Meters',\n        'conversionFactor': 1\n      },\n      {\n        'unitId': 'centimeters',\n        'unitName': 'Centimeters',\n        'conversionFactor': 100\n      },\n      {\n        'unitId': 'millimeters',\n        'unitName': 'Millimeters',\n        'conversionFactor': 1000\n      },\n      {\n        'unitId': 'separator',\n        'unitName': '',\n        'conversionFactor': 0\n      },\n      {\n        'unitId': 'miles',\n        'unitName': 'Miles',\n        'conversionFactor': 0.000621371\n      },\n      {\n        'unitId': 'feet',\n        'unitName': 'Feet',\n        'conversionFactor': 3.281\n      },\n      {\n        'unitId': 'yard',\n        'unitName': 'Yards',\n        'conversionFactor': 1.094\n      },\n      {\n        'unitId': 'inches',\n        'unitName': 'Inches',\n        'conversionFactor': 39.370078740157\n      },\n    ]\n  },\n\n  {\n    'categoryId': 'mass',\n    'categoryName': 'Mass',\n    'categoryIcon': FaWeightHanging,\n    'units': [\n      {\n        'unitId': 'metricton',\n        'unitName': 'Metric Ton',\n        'conversionFactor': 0.001\n      },\n      {\n        'unitId': 'kilograms',\n        'unitName': 'Kilograms',\n        'conversionFactor': 1\n      },\n      {\n        'unitId': 'grams',\n        'unitName': 'Grams',\n        'conversionFactor': 1000\n      },\n      {\n        'unitId': 'separator',\n        'unitName': '',\n        'conversionFactor': 0\n      },\n      {\n        'unitId': 'uston',\n        'unitName': 'US Ton',\n        'conversionFactor': 0.00110231\n      },\n      {\n        'unitId': 'pounds',\n        'unitName': 'Pounds',\n        'conversionFactor': 2.20462\n      },\n      {\n        'unitId': 'ounce',\n        'unitName': 'Ounces',\n        'conversionFactor': 35.274\n      },\n    ]\n  },\n\n  {\n    'categoryId': 'volume',\n    'categoryName': 'Volume',\n    'categoryIcon': FaMugHot,\n    'units': [\n      {\n        'unitId': 'liters',\n        'unitName': 'Liters',\n        'conversionFactor': 1\n      },\n      {\n        'unitId': 'milliliter',\n        'unitName': 'Milliliter',\n        'conversionFactor': 1000\n      },\n      {\n        'unitId': 'separator',\n        'unitName': '',\n        'conversionFactor': 0\n      },\n      {\n        'unitId': 'gallons',\n        'unitName': 'Gallons',\n        'conversionFactor': 0.264172\n      },\n      {\n        'unitId': 'quart',\n        'unitName': 'Quarts',\n        'conversionFactor': 1.05669\n      },\n      {\n        'unitId': 'pint',\n        'unitName': 'Pints',\n        'conversionFactor': 2.11338\n      },\n      {\n        'unitId': 'cup',\n        'unitName': 'Cups',\n        'conversionFactor': 4.22675\n      },\n      {\n        'unitId': 'ounce',\n        'unitName': 'Ounces',\n        'conversionFactor': 33.814\n      },\n    ]\n  },\n]","import React from 'react';\nimport { FaGithub } from 'react-icons/fa';\n\n\nconst Footer = () => {\n  return (\n    <>\n      <hr className='mb-1'/>\n      <div className='d-flex justify-content-center fs-4'>\n        <a href='https://github.com/tg2648/unit-converter' rel='noreferrer' target='_blank'><FaGithub/></a>\n      </div>\n    </>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { DATA } from '../data';\nimport Footer from './Footer';\n\n\nconst Home = () => {\n  return (\n    <div className='mt-2 col-sm-6 col-lg-4 mx-auto'>\n      <div className='d-grid gap-2'>\n        <h1 className='display-5'>Unit Converter</h1>\n        {DATA.map((categoryData, index) => {\n          return (\n            <LinkContainer key={index} to={'/' + categoryData.categoryId}>\n              <Button variant='primary' size='lg'>\n                <div className='row justify-content-center'>\n                  <div className='col-sm-auto'>\n                    <categoryData.categoryIcon />\n                  </div>\n                  <div className='col-4 text-sm-start'>\n                    {categoryData.categoryName}\n                  </div>\n                </div>\n              </Button>\n            </LinkContainer>\n          )\n        })}\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Home;\n","import React, { ChangeEvent, MouseEvent } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { FaCopy } from 'react-icons/fa';\n\n\ntype InputProps = {\n  value: string,\n  id: string,\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void,\n  handleCopy: (e: MouseEvent<HTMLButtonElement>) => void,\n}\n\n\nconst Input: React.FC<InputProps> = (props) => {\n\n  return (\n    <InputGroup>\n      <FormControl\n        id={props.id}\n        inputMode='decimal'\n        value={props.value}\n        onChange={props.handleChange}\n        autoComplete='off'\n      />\n      <Button variant='outline-primary' onClick={props.handleCopy}>\n        <FaCopy/>\n      </Button>\n    </InputGroup>\n  )\n}\n\nexport default Input;\n","import React, { ChangeEvent, MouseEvent, useState } from 'react';\nimport { Category, Unit } from '../data';\nimport Input from './Input';\n\n/**\n * Return conversion factor for a unitId\n */\nconst getConversionFactor = (unitId: string, units: Unit[]): number => {\n  const unitData = units.find(element => element.unitId === unitId);\n  if (unitData) {\n    return unitData.conversionFactor;\n  } else {\n    return 0;\n  }\n}\n\ntype InputGroupProps = {\n  data: Category,\n  showToast: () => void,\n}\n\ntype InputGroupState = {\n  [id: string]: {\n    numValue: number | undefined,\n    displayValue: string\n  },\n}\n\nconst InputGroup: React.FC<InputGroupProps> = (props) => {\n\n  const initialValues: InputGroupState = {}\n  props.data.units.forEach(unit => {\n    initialValues[unit.unitId] = {\n      numValue: undefined,\n      displayValue: '',\n    };\n  });\n\n  const [values, setValues] = useState(initialValues);\n\n  /**\n   * onChange event handler\n   * @param changedUnitId id of the unit whose input field changed\n   * @param e change event\n   */\n  const handleChange = (changedUnitId: string, e: ChangeEvent<HTMLInputElement>) => {\n\n    let newValues = { ...initialValues };\n\n    // Few edge cases to consider\n    // 1. Since input fields are rendered with thousand separators\n    //    and e.target.value is a string, remove separators\n    // 2. When typing a decimal value, text entered with a dot at the end\n    //    needs to be interpreted as a valid number\n\n    let currentNumValue = Number(e.target.value.replaceAll(',', ''));\n    let currentDisplayValue = currentNumValue.toLocaleString();\n\n    const lastChar = e.target.value[e.target.value.length - 1];\n    if (lastChar === '.') {\n      currentDisplayValue = currentDisplayValue + '.';\n    }\n\n    if (e.target.value) {\n      // If input is not empty, calculate conversions. Otherwise, reset values to initial values\n\n      const commonValue = 1 / getConversionFactor(changedUnitId, props.data.units) * currentNumValue;\n\n      for (const unitId in newValues) {\n        if (unitId === changedUnitId) {\n          // Value for the input field currently typed to\n          newValues[unitId].numValue = currentNumValue;\n          newValues[unitId].displayValue = currentDisplayValue;\n        } else {\n          // Values for all others input fields\n          let calc = commonValue * getConversionFactor(unitId, props.data.units);\n          newValues[unitId].numValue = calc;\n          newValues[unitId].displayValue = calc.toLocaleString();\n        }\n      }\n    }\n\n    setValues(newValues);\n  }\n\n  /**\n   * Event handler for Input's copy buttons. Copies input field contents to clipboard.\n   * @param unitId unitId of the corresponding input field\n   * @param e onClick event\n   */\n  const handleCopyButtonClick = (unitId: string, e: MouseEvent<HTMLButtonElement>) => {\n    const value = values[unitId].numValue;\n\n    if (value) {\n      // Do not copy `.000` for whole numbers\n      // parseFloat().toString() to ignore trailing zeroes\n      const valueStr = value % 10 ? parseFloat(value.toFixed(3)).toString() : value.toFixed(0).toString()\n\n      navigator.clipboard.writeText(valueStr).then(() => {\n        console.log('Copied to clipboard!');\n        props.showToast();\n      }, (error) => {\n        console.log('Copy failed: ', error);\n      });\n    }\n  }\n\n  return (\n    <>\n      {\n        props.data.units.map((unit, index) => {\n          if (unit.unitId === 'separator') {\n            return (\n              <hr key={index} />\n            )\n          } else {\n            return (\n              <div key={index} className='row'>\n                <label htmlFor={unit.unitId} className='col-4 fs-5'>\n                  {unit.unitName}\n                </label>\n                <div className='col-8'>\n                  <Input\n                    value={values[unit.unitId].displayValue}\n                    id={unit.unitId}\n                    handleChange={(e: ChangeEvent<HTMLInputElement>) => handleChange(unit.unitId, e)}\n                    handleCopy={(e: MouseEvent<HTMLButtonElement>) => handleCopyButtonClick(unit.unitId, e)}\n                  />\n                </div>\n              </div>\n            )\n          }\n        })\n      }\n    </>\n  )\n}\n\nexport default InputGroup;\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Toast from 'react-bootstrap/Toast';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Category } from '../data';\nimport InputGroup from './InputGroup';\n\n\ntype InputGroupContainerProps = {\n  data: Category\n}\n\nconst InputGroupContainer: React.FC<InputGroupContainerProps> = (props) => {\n  const [toastVisible, setToastVisible] = useState(false);\n  const showToast = () => setToastVisible(true);\n\n  return (\n    <div className='mt-2 d-grid gap-2 col-lg-5 mx-auto'>\n      <LinkContainer exact={true} to='/'>\n        <Button variant='primary' size='lg'>\n          <FaArrowLeft />\n          {' '}\n          Back\n        </Button>\n      </LinkContainer>\n      <InputGroup data={props.data} showToast={showToast} />\n\n      <div\n        style={{\n          position: 'absolute',\n          bottom: 10,\n          left: '50%',\n          transform: 'translateX(-50%)',\n        }}\n      >\n        <Toast\n          animation={false}\n          show={toastVisible}\n          onClose={() => setToastVisible(false)}\n          autohide={true}\n          delay={2000}\n          className='bg-success text-white'\n        >\n          <Toast.Body >Copied to clipboard</Toast.Body>\n        </Toast>\n      </div>\n\n    </div>\n  )\n}\n\nexport default InputGroupContainer;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport {\n  BrowserRouter as Router, Route, Switch\n} from 'react-router-dom';\nimport { DATA } from '../data';\nimport Home from './Home';\nimport InputGroupContainer from './InputGroupContainer';\n\nexport default function App() {\n  return (\n    <Container>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path='/'>\n            <Home />\n          </Route>\n\n          {DATA.map((categoryData, index) => {\n            return (\n              <Route key={index} path={'/' + categoryData.categoryId}>\n                <InputGroupContainer data={categoryData} />\n              </Route>\n            )\n          })}\n\n        </Switch>\n      </Router>\n    </Container>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n   // [::1] is the IPv6 localhost address.\n   window.location.hostname === '[::1]' ||\n   // 127.0.0.0/8 are considered localhost for IPv4.\n   window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void;\n   onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                  'worker. To learn more, visit https://cra.link/PWA'\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                        'tabs for this page are closed. See https://cra.link/PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch((error) => {\n         console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n   })\n      .then((response) => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type');\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n         .then((registration) => {\n            registration.unregister();\n         })\n         .catch((error) => {\n            console.error(error.message);\n         });\n   }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}