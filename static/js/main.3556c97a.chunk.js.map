{"version":3,"sources":["data.tsx","components/Footer.tsx","components/Home.tsx","components/Input.tsx","components/InputGroup.tsx","components/InputGroupContainer.tsx","components/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["DATA","FaRuler","FaWeightHanging","FaMugHot","Footer","className","href","rel","target","Home","map","categoryData","index","to","categoryId","Button","variant","size","categoryIcon","categoryName","Input","props","type","inputMode","value","onChange","handleChange","getConversionFactor","unitId","units","unitData","find","element","conversionFactor","InputGroup","initialValues","data","forEach","unit","useState","values","setValues","unitName","id","e","changedUnitId","newValues","commonValue","Number","parseInt","toFixed","toString","InputGroupContainer","exact","App","Container","basename","process","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3556c97a.chunk.js","sourcesContent":["/**\n * Unit definitions.\n * Search for icons here: https://react-icons.github.io/react-icons/search\n */\n\nimport { IconType } from 'react-icons';\nimport { FaMugHot, FaRuler, FaWeightHanging } from 'react-icons/fa';\n\nexport type Unit = {\n  unitId: string,\n  unitName: string,\n  conversionFactor: number,\n}\n\nexport type Category = {\n  categoryId: string,\n  categoryName: string,\n  categoryIcon: IconType,\n  units: Unit[]\n}\n\nexport const DATA: Category[] = [\n  {\n    'categoryId': 'length',\n    'categoryName': 'Length',\n    'categoryIcon': FaRuler,\n    'units': [\n      {\n        'unitId': 'meters',\n        'unitName': 'Meters',\n        'conversionFactor': 1\n      },\n      {\n        'unitId': 'centimeters',\n        'unitName': 'Centimeters',\n        'conversionFactor': 100\n      },\n      {\n        'unitId': 'feet',\n        'unitName': 'Feet',\n        'conversionFactor': 3.281\n      },\n      {\n        'unitId': 'yard',\n        'unitName': 'Yard',\n        'conversionFactor': 1.094\n      },\n      {\n        'unitId': 'inches',\n        'unitName': 'Inches',\n        'conversionFactor': 39.3701\n      },\n    ]\n  },\n\n  {\n    'categoryId': 'mass',\n    'categoryName': 'Mass',\n    'categoryIcon': FaWeightHanging,\n    'units': [\n      {\n        'unitId': 'kilograms',\n        'unitName': 'Kilograms',\n        'conversionFactor': 1\n      },\n      {\n        'unitId': 'grams',\n        'unitName': 'Grams',\n        'conversionFactor': 1000\n      },\n      {\n        'unitId': 'pounds',\n        'unitName': 'Pounds',\n        'conversionFactor': 2.20462\n      },\n      {\n        'unitId': 'ounce',\n        'unitName': 'Ounce',\n        'conversionFactor': 35.274\n      },\n    ]\n  },\n\n  {\n    'categoryId': 'volume',\n    'categoryName': 'Volume',\n    'categoryIcon': FaMugHot,\n    'units': [\n      {\n        'unitId': 'liters',\n        'unitName': 'Liters',\n        'conversionFactor': 1\n      },\n      {\n        'unitId': 'gallons',\n        'unitName': 'Gallons',\n        'conversionFactor': 0.264172\n      },\n      {\n        'unitId': 'quart',\n        'unitName': 'Quart',\n        'conversionFactor': 1.05669\n      },\n      {\n        'unitId': 'pint',\n        'unitName': 'Pint',\n        'conversionFactor': 2.11338\n      },\n      {\n        'unitId': 'cup',\n        'unitName': 'Cup',\n        'conversionFactor': 4.16667\n      },\n      {\n        'unitId': 'ounce',\n        'unitName': 'Ounce',\n        'conversionFactor': 33.814\n      },\n    ]\n  },\n]","import React from \"react\";\nimport { FaGithub } from 'react-icons/fa';\n\n\nconst Footer = () => {\n  return (\n    <>\n      <hr className='mb-1'/>\n      <div className='d-flex justify-content-center fs-4'>\n        <a href='https://github.com/tg2648/unit-converter' rel='noreferrer' target='_blank'><FaGithub/></a>\n      </div>\n    </>\n  )\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { DATA } from \"../data\";\nimport Footer from \"./Footer\";\n\n\nconst Home = () => {\n  return (\n    <div className='mt-2 col-sm-6 col-lg-4 mx-auto'>\n      <div className='d-grid gap-2'>\n        <h1 className=\"display-5\">Unit Converter</h1>\n        {DATA.map((categoryData, index) => {\n          return (\n            <LinkContainer key={index} to={'/' + categoryData.categoryId}>\n              <Button variant='primary' size=\"lg\">\n                <div className=\"row justify-content-center\">\n                  <div className=\"col-sm-auto\">\n                    <categoryData.categoryIcon />\n                  </div>\n                  <div className=\"col-4 text-sm-start\">\n                    {categoryData.categoryName}\n                  </div>\n                </div>\n              </Button>\n            </LinkContainer>\n          )\n        })}\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Home;\n","import React, { ChangeEvent } from \"react\";\n\ntype InputProps = {\n  value: string,\n  id: string,\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Input: React.FC<InputProps> = (props) => {\n\n  return (\n    <input type=\"text\" inputMode=\"decimal\" className=\"form-control\" value={props.value} onChange={props.handleChange} />\n  )\n}\n\nexport default Input;\n","import React, { ChangeEvent, useState } from \"react\";\nimport { Category, Unit } from \"../data\";\nimport Input from \"./Input\";\n\n/**\n * Return conversion factor for a unitId\n */\nconst getConversionFactor = (unitId: string, units: Unit[]): number => {\n  const unitData = units.find(element => element.unitId === unitId);\n  if (unitData) {\n    return unitData.conversionFactor;\n  } else {\n    return 0;\n  }\n}\n\ntype InputGroupProps = {\n  data: Category\n}\n\ntype InputGroupState = {\n  [index: string]: string,\n}\n\nconst InputGroup: React.FC<InputGroupProps> = (props) => {\n\n  const initialValues: InputGroupState = {}\n  props.data.units.forEach(unit => {\n    initialValues[unit.unitId] = ''\n  });\n\n  const [values, setValues] = useState(initialValues);\n\n  /**\n   * onChange event handler\n   * @param changedUnitId id of the changed unit\n   * @param e change event\n   */\n  const handleChange = (changedUnitId: string, e: ChangeEvent<HTMLInputElement>) => {\n    let newValues = { ...initialValues };\n\n    if (e.target.value) {\n      const commonValue = 1 / getConversionFactor(changedUnitId, props.data.units) * Number.parseInt(e.target.value);\n\n      for (const unitId in newValues) {\n        if (unitId === changedUnitId) {\n          newValues[unitId] = e.target.value;\n        } else {\n          newValues[unitId] = Number(commonValue * getConversionFactor(unitId, props.data.units)).toFixed(2).toString();\n        }\n      }\n    }\n\n    setValues(newValues);\n  }\n\n  return (\n    <>\n      {\n        props.data.units.map((unit, index) => {\n          return (\n            <div key={index} className=\"row\">\n              <div className=\"col-4 fs-5\">\n                {unit.unitName}\n              </div>\n              <div className=\"col-8\">\n                <Input\n                  value={values[unit.unitId]}\n                  id={unit.unitId}\n                  handleChange={(e: ChangeEvent<HTMLInputElement>) => handleChange(unit.unitId, e)}\n                />\n              </div>\n            </div>\n          )\n        })\n      }\n    </>\n  )\n}\n\nexport default InputGroup;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Category } from \"../data\";\nimport InputGroup from \"./InputGroup\";\n\n\ntype InputGroupContainerProps = {\n  data: Category\n}\n\nconst InputGroupContainer: React.FC<InputGroupContainerProps> = (props) => {\n  return (\n    <div className='mt-2 d-grid gap-2 col-lg-5 mx-auto'>\n      <LinkContainer exact={true} to='/'>\n        <Button variant='primary' size='lg'>\n          <FaArrowLeft />\n          {' '}\n          Back\n        </Button>\n      </LinkContainer>\n      <InputGroup data={props.data} />\n    </div>\n  )\n}\n\nexport default InputGroupContainer;\n","import React from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport {\n  BrowserRouter as Router, Route, Switch\n} from \"react-router-dom\";\nimport { DATA } from \"../data\";\nimport Home from \"./Home\";\nimport InputGroupContainer from \"./InputGroupContainer\";\n\nexport default function App() {\n  return (\n    <Container>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n          {DATA.map((categoryData, index) => {\n            return (\n              <Route key={index} path={'/' + categoryData.categoryId}>\n                <InputGroupContainer data={categoryData} />\n              </Route>\n            )\n          })}\n\n        </Switch>\n      </Router>\n    </Container>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n   // [::1] is the IPv6 localhost address.\n   window.location.hostname === '[::1]' ||\n   // 127.0.0.0/8 are considered localhost for IPv4.\n   window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void;\n   onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                  'worker. To learn more, visit https://cra.link/PWA'\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                        'tabs for this page are closed. See https://cra.link/PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch((error) => {\n         console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n   })\n      .then((response) => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type');\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n         .then((registration) => {\n            registration.unregister();\n         })\n         .catch((error) => {\n            console.error(error.message);\n         });\n   }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}