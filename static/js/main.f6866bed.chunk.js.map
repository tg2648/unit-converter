{"version":3,"sources":["App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["DATA","getConversionFactor","unitId","units","unitData","find","element","conversionFactor","App","basename","process","to","map","categoryData","index","categoryId","categoryName","exact","path","data","Input","props","label","type","value","onChange","handleChange","Category","initialValues","forEach","unit","useState","values","setValues","unitName","id","e","changedUnitId","console","log","newValues","target","commonValue","Number","parseInt","toFixed","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6NAkBMA,EAA2B,CAC/B,CACE,WAAc,SACd,aAAgB,SAChB,MAAS,CACP,CACE,OAAU,SACV,SAAY,SACZ,iBAAoB,GAEtB,CACE,OAAU,cACV,SAAY,cACZ,iBAAoB,KAEtB,CACE,OAAU,SACV,SAAY,SACZ,iBAAoB,UAStBC,EAAsB,SAACC,EAAgBC,GAC3C,IAAMC,EAAWD,EAAME,MAAK,SAAAC,GAAO,OAAIA,EAAQJ,SAAWA,KAC1D,OAAIE,EACKA,EAASG,iBAET,GAII,SAASC,IACtB,OACE,cAAC,IAAD,CAAQC,SAAUC,kBAAlB,SACE,gCACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEDX,EAAKY,KAAI,SAACC,EAAcC,GACvB,OACE,6BACE,cAAC,IAAD,CAAMH,GAAI,IAAME,EAAaE,WAA7B,SAA0CF,EAAaG,gBADhDF,SAOf,uBAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAlB,SACE,yCAEDlB,EAAKY,KAAI,SAACC,EAAcC,GACvB,OACE,cAAC,IAAD,CAAmBI,KAAM,IAAML,EAAaE,WAA5C,SACE,cAAC,EAAD,CAAUI,KAAMN,KADNC,cAiB1B,IAAMM,EAAkC,SAACC,GAEvC,OACE,kCACGA,EAAMC,MACP,uBAAOC,KAAK,OAAOC,MAAOH,EAAMG,MAAOC,SAAUJ,EAAMK,mBASvDC,EAAwC,SAACN,GAK7C,IAAMO,EAAgC,GACtCP,EAAMF,KAAKhB,MAAM0B,SAAQ,SAAAC,GACvBF,EAAcE,EAAK5B,QAAU,MAG/B,MAA4B6B,mBAASH,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KA2BA,OACE,8BAEIZ,EAAMF,KAAKhB,MAAMS,KAAI,SAACkB,EAAMhB,GAC1B,OACE,gCACE,cAAC,EAAD,CACEQ,MAAOQ,EAAKI,SACZV,MAAOQ,EAAOF,EAAK5B,QACnBiC,GAAIL,EAAK5B,OACTwB,aAAc,SAACU,GAAD,OA9BP,SAACC,EAAuBD,GAC3CE,QAAQC,IAAI,eAAgBF,GAE5B,IAAIG,EAAS,eAAOZ,GAEpB,GAAIQ,EAAEK,OAAOjB,MAAO,CAClB,IAAMkB,EAAc,EAAIzC,EAAoBoC,EAAehB,EAAMF,KAAKhB,OAASwC,OAAOC,SAASR,EAAEK,OAAOjB,OAExG,IAAK,IAAMtB,KAAUsC,EAEjBA,EAAUtC,GADRA,IAAWmC,EACOD,EAAEK,OAAOjB,MAETmB,OAAOD,EAAczC,EAAoBC,EAAQmB,EAAMF,KAAKhB,QAAQ0C,QAAQ,GAAGC,WAKzGb,EAAUO,GAasDd,CAAaI,EAAK5B,OAAQkC,MAEhF,yBAPQtB,SC1IPiC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCGRQ,EAAcC,QACY,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0ClC,SAASC,EAAgBC,EAAeC,GACrCC,UAAUC,cACNC,SAASJ,GACTb,MAAK,SAACkB,GACJA,EAAaC,cAAgB,WAC1B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACC,cAA3BF,EAAiBG,QACdR,UAAUC,cAAcQ,YAIzBpC,QAAQC,IACL,+GAKCyB,GAAUA,EAAOW,UAClBX,EAAOW,SAASP,KAMnB9B,QAAQC,IAAI,sCAGRyB,GAAUA,EAAOY,WAClBZ,EAAOY,UAAUR,WAOlCS,OAAM,SAACC,GACLxC,QAAQwC,MAAM,4CAA6CA,MC5FpEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzE,EAAD,MAEF0E,SAASC,eAAe,SDcnB,SAAkBnB,GACtB,GAA6C,kBAAmBC,UAAW,CAGxE,GADkB,IAAImB,IAAI1E,kBAAwBgD,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAItC,OAGH5B,OAAO6B,iBAAiB,QAAQ,WAC7B,IAAMxB,EAAK,UAAMrD,kBAAN,sBAEP8C,IAgEb,SAAiCO,EAAeC,GAE7CwB,MAAMzB,EAAO,CACV0B,QAAS,CAAE,iBAAkB,YAE5BvC,MAAK,SAACwC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAElB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM7C,MAAK,SAACkB,GACjCA,EAAa4B,aAAa9C,MAAK,WAC5BQ,OAAOC,SAASsC,eAKtBnC,EAAgBC,EAAOC,MAG5Ba,OAAM,WACJvC,QAAQC,IAAI,oEAtFT2D,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM7C,MAAK,WAChCZ,QAAQC,IACL,+GAMNuB,EAAgBC,EAAOC,OCvCnCmC,GACApD,M","file":"static/js/main.f6866bed.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from \"react\";\nimport {\n  BrowserRouter as Router, Link, Route, Switch\n} from \"react-router-dom\";\n\n\ntype UnitDataType = {\n  unitId: string,\n  unitName: string,\n  conversionFactor: number,\n}\n\ntype CategoryDataType = {\n  categoryId: string,\n  categoryName: string,\n  units: UnitDataType[]\n}\n\nconst DATA: CategoryDataType[] = [\n  {\n    'categoryId': 'length',\n    'categoryName': 'Length',\n    'units': [\n      {\n        'unitId': 'meters',\n        'unitName': 'Meters',\n        'conversionFactor': 1\n      },\n      {\n        'unitId': 'centimeters',\n        'unitName': 'Centimeters',\n        'conversionFactor': 100\n      },\n      {\n        'unitId': 'inches',\n        'unitName': 'Inches',\n        'conversionFactor': 39.37\n      },\n    ]\n  }\n]\n\n/**\n * Return conversion factor for a unitId\n */\nconst getConversionFactor = (unitId: string, units: UnitDataType[]): number => {\n  const unitData = units.find(element => element.unitId === unitId);\n  if (unitData) {\n    return unitData.conversionFactor;\n  } else {\n    return 0;\n  }\n}\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          {DATA.map((categoryData, index) => {\n            return (\n              <li key={index}>\n                <Link to={'/' + categoryData.categoryId}>{categoryData.categoryName}</Link>\n              </li>\n            )\n          })}\n        </ul>\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <div>Home</div>\n          </Route>\n          {DATA.map((categoryData, index) => {\n            return (\n              <Route key={index} path={'/' + categoryData.categoryId}>\n                <Category data={categoryData} />\n              </Route>\n            )\n          })}\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\ntype InputPropsType = {\n  label: string,\n  value: string,\n  id: string,\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\nconst Input: React.FC<InputPropsType> = (props) => {\n\n  return (\n    <label>\n      {props.label}\n      <input type=\"text\" value={props.value} onChange={props.handleChange} />\n    </label>\n  )\n}\n\n\ntype CategoryPropsType = {\n  data: CategoryDataType\n}\nconst Category: React.FC<CategoryPropsType> = (props) => {\n\n  type StateValueType = {\n    [index: string]: string,\n  }\n  const initialValues: StateValueType = {}\n  props.data.units.forEach(unit => {\n    initialValues[unit.unitId] = ''\n  });\n\n  const [values, setValues] = useState(initialValues);\n\n  /**\n   * onChange event handler\n   * @param changedUnitId id of the changed unit\n   * @param e change event\n   */\n  const handleChange = (changedUnitId: string, e: ChangeEvent<HTMLInputElement>) => {\n    console.log('onChange in ', changedUnitId);\n\n    let newValues = {...initialValues};\n\n    if (e.target.value) {\n      const commonValue = 1 / getConversionFactor(changedUnitId, props.data.units) * Number.parseInt(e.target.value);\n\n      for (const unitId in newValues) {\n        if (unitId === changedUnitId) {\n          newValues[unitId] = e.target.value;\n        } else {\n          newValues[unitId] = Number(commonValue * getConversionFactor(unitId, props.data.units)).toFixed(2).toString();\n        }\n      }\n    }\n\n    setValues(newValues);\n  }\n\n  return (\n    <div>\n      {\n        props.data.units.map((unit, index) => {\n          return (\n            <div key={index}>\n              <Input\n                label={unit.unitName}\n                value={values[unit.unitId]}\n                id={unit.unitId}\n                handleChange={(e: ChangeEvent<HTMLInputElement>) => handleChange(unit.unitId, e)}\n              />\n              <br></br>\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n   // [::1] is the IPv6 localhost address.\n   window.location.hostname === '[::1]' ||\n   // 127.0.0.0/8 are considered localhost for IPv4.\n   window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void;\n   onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                  'worker. To learn more, visit https://cra.link/PWA'\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                        'tabs for this page are closed. See https://cra.link/PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch((error) => {\n         console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n   })\n      .then((response) => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type');\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         console.log('No internet connection found. App is running in offline mode.');\n      });\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n         .then((registration) => {\n            registration.unregister();\n         })\n         .catch((error) => {\n            console.error(error.message);\n         });\n   }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}